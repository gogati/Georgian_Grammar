var ზმნისწინები = [
	'ა', 'ამო', 'აღ', 'აღმო', 'ჩა', 'ჩამო', 'შთა', 'შთამო', 'გა', 'გამო', 'გან', 'განმო', 'გადა', 'გადმო', 'გარდა', 'გარდამო', 'ზეგარდმო', 'გარდმო', 'მი', 'მიმო', 'უკუ', 'და', 'დამო', 'მო', 'წა', 'წამო', 'წარ', 'წარმო'
];

// დახარისხება რათა მო-ს შემცველი ზმნისწინები პირველი იყოს  
ზმნისწინები.sort().sort(function (a, b) {
	if (a.indexOf('მო') > 0) {
		return -1;
	}
	return 0;
});
var ძირები = {
	ვარდ : [
		{
			კლასი : 'ზმნა',
			მნიშვნელობა : 'მოძრაობა ზემოდან ქვევით',
			ფუძეები : ['ვარდ'],
			მოულოდნელი_ზმნისწინები : ['ზე']
		},
		{
			კლასი : 'ზმნა',
			მნიშვნელობა : 'ვარდად გადაქცევა',
			ფუძეები : ['ვარდ']
		},
		{
			კლასი : 'არსებითი სახელი',
			მნიშვნელობა : 'ყვავილი',
			ფუძეები : ['ვარდ', 'ვარდებ', 'ვარდნ']
		}
	]	
};

var მბ = [
	{
		სიტყვა : 'ვარდება',
		კლასი  : 'ზმნა',
		ძირი   : 'ვარდ'
	},
	{
		სიტყვა : 'დავარდება',
		კლასი  : 'ზმნა',
		ძირი   : 'ვარდ'
	},
	{
		სიტყვა : 'დაუვარდა',
		კლასი  : 'ზმნა',
		ძირი   : 'ვარდ'
	},
	{
		სიტყვა : 'გავარდა',
		კლასი  : 'ზმნა',
		ძირი   : 'ვარდ'
	},
	{
		სიტყვა : 'გავარდდა',
		კლასი  : 'ზმნა',
		ძირი   : 'ვარდ'
	},
	{
		სიტყვა : 'ვარდებმა',
		კლასი  : 'არსებითი სახელი',
		ძირი   : 'ვარდ'
	},
];

var შედეგი = გაანალიზე('ვარდება', true);
console.log(შედეგი);

/*
	
*/

function გაანალიზე (სიტყვა, დაიხსომე) {
	var არის_ახალი = ახალია(სიტყვა);
	if (არის_ახალი) {
		return ცნობილნი(სიტყვა);
	}
	var კლასი = გაარკვიე_კლასი(სიტყვა);
}


function ცნობილნი (სიტყვა) {
	var res = [];
	for (var j = 0; j < მბ.length; j++) {
		if (მბ[j].სიტყვა === სიტყვა) {
			res.push(მბ[j]);
		}
	}
	return res;
}

function ახალია (სიტყვა) {
	for (var j = 0; j < მბ.length; j++) {
		console.log(j + '/' + სიტყვა + '/' + მბ[j].სიტყვა)
		if (მბ[j].სიტყვა === სიტყვა) {
			return true
		}
	}
	return false;
}

function ზმნაა (სიტყვა) {
	var out = {ზმნაა : false};
	for (var i = 0; i < ზმნისწინები; i++) {
		if (სიტყვა.indexOf(ზმნისწინები[i]) === 0) {
			out = {
				არის_ზმნა : true,
				სიტყვა    : სიტყვა,
				ზმნისწინი : ზმნისწინები[i],
				ბოლოსართი : ''
			};
			var ნაშთი = სიტყვა.replace(ზმნისწინები[i], '');
			out.ფუძე = იპოვე_ზმნური_ძირი(ნაშთი);
		}
	}
}

function იპოვე_ზმნური_ძირი (ნაშთი) {
	return '';
}